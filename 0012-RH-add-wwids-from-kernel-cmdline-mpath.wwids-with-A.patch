diff -up multipath-tools-0.8.0/libmultipath/wwids.c.6~ multipath-tools-0.8.0/libmultipath/wwids.c
--- multipath-tools-0.8.0/libmultipath/wwids.c.6~	2019-02-14 18:55:29.000000000 +0100
+++ multipath-tools-0.8.0/libmultipath/wwids.c	2019-02-16 15:27:10.504249304 +0100
@@ -443,3 +443,47 @@ int op ## _wwid(const char *wwid) \
 declare_failed_wwid_op(is_failed, false)
 declare_failed_wwid_op(mark_failed, true)
 declare_failed_wwid_op(unmark_failed, true)
+
+int remember_cmdline_wwid(void)
+{
+	FILE *f = NULL;
+	char buf[LINE_MAX], *next, *ptr;
+	int ret = 0;
+
+	f = fopen("/proc/cmdline", "re");
+	if (!f) {
+		condlog(0, "can't open /proc/cmdline : %s", strerror(errno));
+		return -1;
+	}
+
+	if (!fgets(buf, sizeof(buf), f)) {
+		if (ferror(f))
+			condlog(0, "read of /proc/cmdline failed : %s",
+				strerror(errno));
+		else
+			condlog(0, "couldn't read /proc/cmdline");
+		fclose(f);
+		return -1;
+	}
+	fclose(f);
+	next = buf;
+	while((ptr = strstr(next, "mpath.wwid="))) {
+		ptr += 11;
+		next = strpbrk(ptr, " \t\n");
+		if (next) {
+			*next = '\0';
+			next++;
+		}
+		if (strlen(ptr)) {
+			if (remember_wwid(ptr) != 0)
+				ret = -1;
+		}
+		else {
+			condlog(0, "empty mpath.wwid kernel command line option");
+			ret = -1;
+		}
+		if (!next)
+			break;
+	}
+	return ret;
+}
diff -up multipath-tools-0.8.0/libmultipath/wwids.h.6~ multipath-tools-0.8.0/libmultipath/wwids.h
--- multipath-tools-0.8.0/libmultipath/wwids.h.6~	2019-02-14 18:55:29.000000000 +0100
+++ multipath-tools-0.8.0/libmultipath/wwids.h	2019-02-16 15:27:10.504249304 +0100
@@ -17,6 +17,7 @@ int remember_wwid(char *wwid);
 int check_wwids_file(char *wwid, int write_wwid);
 int remove_wwid(char *wwid);
 int replace_wwids(vector mp);
+int remember_cmdline_wwid(void);
 
 enum {
 	WWID_IS_NOT_FAILED = 0,
diff -up multipath-tools-0.8.0/multipathd/multipathd.service.6~ multipath-tools-0.8.0/multipathd/multipathd.service
--- multipath-tools-0.8.0/multipathd/multipathd.service.6~	2019-02-16 15:27:10.502249278 +0100
+++ multipath-tools-0.8.0/multipathd/multipathd.service	2019-02-16 15:27:10.505249318 +0100
@@ -15,6 +15,7 @@ Type=notify
 NotifyAccess=main
 LimitCORE=infinity
 ExecStartPre=-/sbin/modprobe -a scsi_dh_alua scsi_dh_emc scsi_dh_rdac dm-multipath
+ExecStartPre=-/sbin/multipath -A
 ExecStart=/sbin/multipathd -d -s
 ExecReload=/sbin/multipathd reconfigure
 TasksMax=infinity
diff -up multipath-tools-0.8.0/multipath/main.c.6~ multipath-tools-0.8.0/multipath/main.c
--- multipath-tools-0.8.0/multipath/main.c.6~	2019-02-14 18:55:29.000000000 +0100
+++ multipath-tools-0.8.0/multipath/main.c	2019-02-16 15:28:30.001304392 +0100
@@ -133,7 +133,7 @@ usage (char * progname)
 {
 	fprintf (stderr, VERSION_STRING);
 	fprintf (stderr, "Usage:\n");
-	fprintf (stderr, "  %s [-a|-c|-w|-W] [-d] [-r] [-i] [-v lvl] [-p pol] [-b fil] [-q] [dev]\n", progname);
+	fprintf (stderr, "  %s [-a|-A|-c|-w|-W] [-d] [-r] [-i] [-v lvl] [-p pol] [-b fil] [-q] [dev]\n", progname);
 	fprintf (stderr, "  %s -l|-ll|-f [-v lvl] [-b fil] [-R num] [dev]\n", progname);
 	fprintf (stderr, "  %s -F [-v lvl] [-R num]\n", progname);
 	fprintf (stderr, "  %s [-t|-T]\n", progname);
@@ -147,6 +147,8 @@ usage (char * progname)
 		"  -f      flush a multipath device map\n"
 		"  -F      flush all multipath device maps\n"
 		"  -a      add a device wwid to the wwids file\n"
+		"  -A      add devices from kernel command line mpath.wwids\n"
+		"          parameters to wwids file\n"
 		"  -c      check if a device should be a path in a multipath device\n"
 		"  -C      check if a multipath device has usable paths\n"
 		"  -q      allow queue_if_no_path when multipathd is not running\n"
@@ -870,7 +872,7 @@ main (int argc, char *argv[])
 		exit(RTVL_FAIL);
 	multipath_conf = conf;
 	conf->retrigger_tries = 0;
-	while ((arg = getopt(argc, argv, ":adcChl::FfM:v:p:b:BrR:itTquUwW")) != EOF ) {
+	while ((arg = getopt(argc, argv, ":aAdcChl::FfM:v:p:b:BrR:itTquUwW")) != EOF ) {
 		switch(arg) {
 		case 1: printf("optarg : %s\n",optarg);
 			break;
@@ -940,6 +942,10 @@ main (int argc, char *argv[])
 		case 'T':
 			cmd = CMD_DUMP_CONFIG;
 			break;
+		case 'A':
+			if (remember_cmdline_wwid() != 0)
+				exit(1);
+			exit(0);
 		case 'h':
 			usage(argv[0]);
 			exit(RTVL_OK);
diff -up multipath-tools-0.8.0/multipath/multipath.8.6~ multipath-tools-0.8.0/multipath/multipath.8
--- multipath-tools-0.8.0/multipath/multipath.8.6~	2019-02-14 18:55:29.000000000 +0100
+++ multipath-tools-0.8.0/multipath/multipath.8	2019-02-16 15:27:10.505249318 +0100
@@ -167,6 +167,9 @@ itself doesn't attempt to do I/O on the
 Check if the device specified in the program environment should be
 a path in a multipath device.
 .
+.B \-A
+add wwids from any kernel command line mpath.wwid parameters to the wwids file
+.
 .TP
 .B \-U
 Check if the device specified in the program environment is a multipath device
